name: Update gh docker image

on:
  # Triggers the workflow on releases
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  # Allow to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  update:
    name: Update themes
    runs-on: ubuntu-latest
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Trigger job
        run: |
          curl --fail --request POST \
          --form token=${{ secrets.TOKEN }} \
          --form ref=main \
          --form "variables[GITHUB_TAG]=${{ steps.get_version.outputs.VERSION }}" \
          "https://gitlab.com/api/v4/projects/${{ secrets.PROJECT_ID }}/trigger/pipeline"

  build-image:
    name: Build docker image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Log-in to ghcr.io
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Generate constraints.txt from constraint.cfg
      run: |
        cd docker
        pip install zc.buildout
        python create-constraints.py constraints.cfg constraints.txt

    - name: Build and push container image
      run: |
          IMAGE_ID=$(echo ghcr.io/${{ github.repository }} | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # when the branch is master, replace master with latest
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          # Build and Publish container image
          cd docker
          docker buildx build --push \
          --tag $IMAGE_ID:$VERSION \
          --platform linux/amd64 .
